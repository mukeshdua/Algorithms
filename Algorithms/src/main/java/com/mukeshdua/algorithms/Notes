Dynamic Programming:
	Overlapping and Optimal Substructure
Approaches:
	Bottom up - table 
	Top down- Momization
Problems:
	Factorial: 
	Febonacci:
	Longest common subsequence:
		Brute force:
			LCS(s1, s2, i, j):
    		if(i == -1 || j == -1)
        		return 0
    		if(s1[i] == s2[j])
        		return 1 + LCS(s1, s2, i-1, j-1)
    		return max(LCS(s1, s2, i-1, j), LCS(s1, s2, i, j-1))
		The idea is if we have two strings s1 and s2 where s1 ends at i and s2 ends at j, then the LCS is:

if either string is empty, then the longest common subsequence is 0.
If the last character (index i) of string 1 is the same as the last one in string 2 (index j), then the answer is 1 plus the LCS of s1 and s2 ending at i-1 and j-1, respectively. Because it's obvious that those two indices contribute to the LCS, so it's optimal to count them.
If the last characters don't match, then we try to remove one of the characters. So we try finding LCS between s1 (ending at i-1) and s2 (ending at j) and the LCS between s1 (ending at i) and s2 (ending at j-1), then take the max of both.
	
	public int longestCommonSubsequence(String A, String B) {
         if(A==null || B==null || A.length()==0 || A.length()==0)
         {
             return 0;
         }
         int[][] arr = new int[A.length()+1][B.length()+1];
         for(int i=0;i<A.length();i++)
         {
             for(int j=0;j<B.length();j++)
             {
                 if(i==0 || j==0)
                 {
                     arr[i][j]=0;
                 }
                 if(A.charAt(i) == B.charAt(j))
                 {
                     arr[i+1][j+1]= arr[i][j]+1;
                 }
                 else
                 {
                     arr[i+1][j+1]= Math.max(arr[i+1][j],arr[i][j+1]);
                 }
             }
         }
         return arr[A.length()][B.length()];
    }

    
    //Edit Distance
    public static int minDistance(String word1, String word2) {
	int len1 = word1.length();
	int len2 = word2.length();
 
	// len1+1, len2+1, because finally return dp[len1][len2]
	int[][] dp = new int[len1 + 1][len2 + 1];
 
	for (int i = 0; i <= len1; i++) {
		dp[i][0] = i;
	}
 
	for (int j = 0; j <= len2; j++) {
		dp[0][j] = j;
	}
 
	//iterate though, and check last char
	for (int i = 0; i < len1; i++) {
		char c1 = word1.charAt(i);
		for (int j = 0; j < len2; j++) {
			char c2 = word2.charAt(j);
 
			//if last two chars equal
			if (c1 == c2) {
				//update dp value for +1 length
				dp[i + 1][j + 1] = dp[i][j];
			} else {
				int replace = dp[i][j] + 1;
				int insert = dp[i][j + 1] + 1;
				int delete = dp[i + 1][j] + 1;
 
				int min = replace > insert ? insert : replace;
				min = delete > min ? min : delete;
				dp[i + 1][j + 1] = min;
			}
		}
	}
 
	return dp[len1][len2];
}